

pub contract CryptoPoops {

  pub var totalSupply: UInt64

  // This is an NFT resource that contains a name,
  // favouriteFood, and luckyNumber
    pub resource NFT {
    pub let id: UInt64

    pub let name: String
    pub let favouriteFood: String
    pub let luckyNumber: Int


  //initialization function for the NFT resource - this resource takes in four arguments id, name, favoruiteFood, and luckyNumber
    init(_name: String, _favouriteFood: String, _luckyNumber: Int) {
      self.id = self.uuid

      self.name = _name
      self.favouriteFood = _favouriteFood
      self.luckyNumber = _luckyNumber
    }
  }

  // This is a resource interface that allows the user to interact with the functions deposit, getIDs, borrowNFTs
  pub resource interface CollectionPublic {
    pub fun deposit(token: @NFT)
    pub fun getIDs(): [UInt64]
    pub fun borrowNFT(id: UInt64): &NFT
  }

   //this is a resource Collection which has the resource interface CollectionPublic applied to it. Which means it must have the corresponding variables and functions in the interface. 
  pub resource Collection: CollectionPublic {
    pub var ownedNFTs: @{UInt64: NFT}

    //allows the deposit of an NFT into the dictionary of NFTs 
    pub fun deposit(token: @NFT) {
      self.ownedNFTs[token.id] <-! token
    }

    //allows for the withdrawal of an NFT based on the withdrawID variable, if there is an NFT tied to it it will return the nft, otherwise will panic/abort because the NFT is not in the collection
    pub fun withdraw(withdrawID: UInt64): @NFT {
      let nft <- self.ownedNFTs.remove(key: withdrawID) 
              ?? panic("This NFT does not exist in this Collection.")
      return <- nft
    }

    //returns the list of keys that are in the dictionary
    pub fun getIDs(): [UInt64] {
      return self.ownedNFTs.keys
    }

    //takes an id and returns the reference to the user's NFTs so that information can be read about them
    pub fun borrowNFT(id: UInt64): &NFT {
      return &self.ownedNFTs[id] as &NFT
    }

    init() {
      self.ownedNFTs <- {}
    }

    //destroys the dictionary of ownedNFTs
    destroy() {
      destroy self.ownedNFTs
    }
  }

  //creates an empty collection
  pub fun createEmptyCollection(): @Collection {
    return <- create Collection()
  }

  //creates a resource called Minter, presumably to restrict who can create certain resources/NFTs
  pub resource Minter {

    //createNFT creates and returns an NFT based on information in the arguments used when calling it
    pub fun createNFT(name: String, favouriteFood: String, luckyNumber: Int): @NFT {
      return <- create NFT(_name: name, _favouriteFood: favouriteFood, _luckyNumber: luckyNumber)
    }

    //returns the Minter resource
    pub fun createMinter(): @Minter {
      return <- create Minter()
    }

  }

  //initizliation function which sets the total supply to 0. It also creates a Minter resource and saves it into the account (storage) of the user, which allows only them 
  //to access access the createNFT function
  init() {
    self.totalSupply = 0
    self.account.save(<- create Minter(), to: /storage/Minter)
  }
}