1. What does "force casting" with as! do? Why is it useful in our Collection?
It downcasts by forcing a value to a more specific/original type. It can be useful in our Collection by 


2. What does auth do? When do we use it?
It functions similarly to downcasting but for references and allows us to get an authorized reference that allows access to more specific information. We use it when we need to read metadata from a more specific type/resource.

This last quest will be your most difficult yet. Take this contract:

CryptoPoops contract in 0x01
------------------------
import NonFungibleToken from 0x02

pub contract CryptoPoops: NonFungibleToken {
  pub var totalSupply: UInt64

  pub event ContractInitialized()
  pub event Withdraw(id: UInt64, from: Address?)
  pub event Deposit(id: UInt64, to: Address?)

  pub resource NFT: NonFungibleToken.INFT {
    pub let id: UInt64

    pub let name: String
    pub let favouriteFood: String
    pub let luckyNumber: Int

    init(_name: String, _favouriteFood: String, _luckyNumber: Int) {
      self.id = self.uuid

      self.name = _name
      self.favouriteFood = _favouriteFood
      self.luckyNumber = _luckyNumber
    }
  }

   //to read the metadata on script
   pub resource interface MyCollectionPublic {
        pub fun deposit(token: @NonFungibleToken.NFT)
        pub fun getIDs(): [UInt64]
        pub fun borrowAuthNFT(id: UInt64): &NFT
    }

  pub resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic,  MyCollectionPublic {
    pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

    pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {
      let nft <- self.ownedNFTs.remove(key: withdrawID) 
            ?? panic("This NFT does not exist in this Collection.")
      emit Withdraw(id: nft.id, from: self.owner?.address)
      return <- nft
    }

    pub fun deposit(token: @NonFungibleToken.NFT) {
      let nft <- token as! @NFT
      emit Deposit(id: nft.id, to: self.owner?.address)
      self.ownedNFTs[nft.id] <-! nft
    }

    pub fun getIDs(): [UInt64] {
      return self.ownedNFTs.keys
    }
  
    pub fun borrowAuthNFT(id: UInt64): &NFT {
        let ref = &self.ownedNFTs[id] as auth &NonFungibleToken.NFT
        return ref as! &NFT
    }

    pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
      return &self.ownedNFTs[id] as &NonFungibleToken.NFT
    }

    init() {
      self.ownedNFTs <- {}
    }

    destroy() {
      destroy self.ownedNFTs
    }
  }

  pub fun createEmptyCollection(): @NonFungibleToken.Collection {
    return <- create Collection()
  }

  pub resource Minter {

    pub fun createNFT(name: String, favouriteFood: String, luckyNumber: Int): @NFT {
      return <- create NFT(_name: name, _favouriteFood: favouriteFood, _luckyNumber: luckyNumber)
    }

    pub fun createMinter(): @Minter {
      return <- create Minter()
    }

  }

  init() {
    self.totalSupply = 0
    emit ContractInitialized()
    self.account.save(<- create Minter(), to: /storage/Minter)
  }
}





NonFungibleToken in 0x02
----------------------
/**
## The Flow Non-Fungible Token standard
*/

// The main NFT contract interface. Other NFT contracts will
// import and implement this interface
//
pub contract interface NonFungibleToken {

    pub var totalSupply: UInt64

    pub event ContractInitialized()

    pub event Withdraw(id: UInt64, from: Address?)

    pub event Deposit(id: UInt64, to: Address?)

    pub resource interface INFT {
        // The unique ID that each NFT has
        pub let id: UInt64
    }

    pub resource NFT: INFT {
        pub let id: UInt64
    }

    pub resource interface Provider {
        pub fun withdraw(withdrawID: UInt64): @NFT {
            post {
                result.id == withdrawID: "The ID of the withdrawn token must be the same as the requested ID"
            }
        }
    }

    pub resource interface Receiver {
        pub fun deposit(token: @NFT)
    }

    pub resource interface CollectionPublic {
        pub fun deposit(token: @NonFungibleToken.NFT)
        pub fun getIDs(): [UInt64]
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT

    }

    pub resource Collection: Provider, Receiver, CollectionPublic {

        // Dictionary to hold the NFTs in the Collection
        pub var ownedNFTs: @{UInt64: NFT}

        // withdraw removes an NFT from the collection and moves it to the caller
        pub fun withdraw(withdrawID: UInt64): @NFT

        // deposit takes a NFT and adds it to the collections dictionary
        // and adds the ID to the id array
        pub fun deposit(token: @NFT)

        // getIDs returns an array of the IDs that are in the collection
        pub fun getIDs(): [UInt64]

        // Returns a borrowed reference to an NFT in the collection
        // so that the caller can read data and call methods from it
        pub fun borrowNFT(id: UInt64): &NFT {
            pre {
                self.ownedNFTs[id] != nil: "NFT does not exist in the collection!"
            }
        }
    }

    pub fun createEmptyCollection(): @Collection {
        post {
            result.getIDs().length == 0: "The created collection must be empty!"
        }
    }
}


Transaction 1- create Collection
----------------------
import CryptoPoops from 0x01
import NonFungibleToken from 0x02

transaction {

  prepare(acct: AuthAccount) {
 
    let collection <- CryptoPoops.createEmptyCollection()
    acct.save(<- collection, to: /storage/Collection)
  
    //links the resource so the public can read it
    acct.link<&CryptoPoops.Collection{NonFungibleToken.CollectionPublic, CryptoPoops.MyCollectionPublic}>(/public/Collection, target: /storage/Collection)

  }

  execute {
  
    log("Stored a Collection")
  
  }
}

Transaction 2 - create NFT
----------------------
import CryptoPoops from 0x01
import NonFungibleToken from 0x02

transaction (recipient : Address, name: String, favouriteFood: String, luckyNumber: Int) {

    prepare(acct: AuthAccount) {

    let nftMinter = acct.borrow<&CryptoPoops.Minter>(from: /storage/Minter)!

    let publicReference = getAccount(recipient).getCapability(/public/Collection)
                          .borrow<&CryptoPoops.Collection{CryptoPoops.MyCollectionPublic}>()
                          ?? panic("This account does not have a Collection")
  
    publicReference.deposit(token: <- nftMinter.createNFT(name: name, favouriteFood: favouriteFood, luckyNumber: luckyNumber))
  }

  execute {
    log("Deposited an NFT")
  }
}



Script 1 - get IDs (to get the UInt64 ID of the resource)
---------------

import CryptoPoops from 0x01
import NonFungibleToken from 0x02

pub fun main(acct : Address): [UInt64] {
    let publicReference = getAccount(acct).getCapability(/public/Collection)
                        .borrow<&CryptoPoops.Collection{NonFungibleToken.CollectionPublic}>()
                        ?? panic("This account does not have a collection")
    return publicReference.getIDs()
}





Script 2 - public reference for metadata
----------------

import CryptoPoops from 0x01
import NonFungibleToken from 0x02

pub fun main(acct : Address, id : UInt64) {

    let publicReference = getAccount(acct).getCapability(/public/Collection)
                        .borrow<&CryptoPoops.Collection{CryptoPoops.MyCollectionPublic}>()
                        ?? panic("This account does not have a collection")

    log(publicReference.borrowAuthNFT(id : id).name)
    log(publicReference.borrowAuthNFT(id : id).favouriteFood)
    log(publicReference.borrowAuthNFT(id : id).luckyNumber)
}














