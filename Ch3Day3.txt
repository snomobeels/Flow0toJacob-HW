1. Define your own contract that stores a dictionary of resources. Add a function to get a reference to one of the resources in the dictionary.

pub contract Biblio {

    pub var dictionaryOfBooks: @{String: Book}

    pub resource Book {
        pub let author: String
        init(_author: String) {
            self.author = _author
        }
    }

    pub fun getReference(key: String): &Book {
        return &self.dictionaryOfBooks[key] as &Book
    }

    init() {
        self.dictionaryOfBooks <- {
            "Norwegian Wood": <- create Book(_author: "Murakami"), 
            "Catcher in the Rye": <- create Book(_author: "JD Salinger")
        }
    }
}

2. Create a script that reads information from that resource using the reference from the function you defined in part 1.

import Biblio from 0x05

pub fun main(): String {
  let ref = Biblio.getReference(key: "Norwegian Wood")
  return ref.author
  }

3. Explain, in your own words, why references can be useful in Cadence

References are useful in the context of things like resources, where they allow you to look at and update fields without necessarily moving the resource back and forth. 